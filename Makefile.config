ifneq ($(MAKEFILE_CONFIG_INCLUDED), $(MAKELEVEL))
MAKEFILE_CONFIG_INCLUDED := $(MAKELEVEL)

export

PREFIX ?=

MAKECONFIG_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

SHELL := /bin/sh

# Clear default rules
.SUFFIXES:

# Root directory
ROOT ?= $(abspath $(dir $(firstword $(MAKEFILE_LIST))))

# Optimizations
OPTIMIZATIONS ?= -O3

# Extra options to compile project with
EXTRA_C_FLAGS ?=
EXTRA_CXX_FLAGS ?=

# Extra options to link project with
EXTRA_LD_FLAGS ?=

# Useful when building external libraries
EXTERNAL_EXTRA_C_FLAGS ?= $(EXTRA_C_FLAGS)
EXTERNAL_EXTRA_CXX_FLAGS ?= $(EXTRA_CXX_FLAGS)
EXTERNAL_EXTRA_LD_FLAGS ?= $(EXTRA_LD_FLAGS)

# Warning options to compile project with
WARNING_FLAGS ?= -Wall -Wextra -Wshadow -Wfloat-equal -Wno-unused-result # -Weffc++

CFLAGS = $(WARNING_FLAGS) $(EXTRA_C_FLAGS) $(OPTIMIZATIONS)
CXXFLAGS = -std=c++14 $(CFLAGS) $(EXTRA_CXX_FLAGS)
LFLAGS = $(filter-out -gsplit-dwarf, $(CXXFLAGS) -fuse-ld=gold $(EXTRA_LD_FLAGS))
LD ?= ld.gold

# Shell commands
MV := mv -f
CP := cp -rf
UPDATE := $(CP) -u
RM := rm -f
MKDIR := mkdir -p

DEBUG := 0
VERBOSE := 0

ifeq ($(DEBUG), 1)
CFLAGS += -DDEBUG -g -gsplit-dwarf -fno-omit-frame-pointer
else ifeq ($(DEBUG), 2)
CFLAGS += -DDEBUG -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined -fno-omit-frame-pointer
else ifeq ($(DEBUG), 3)
CFLAGS += -DDEBUG -g -gsplit-dwarf -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined -fno-omit-frame-pointer
else ifeq ($(DEBUG), 4)
CFLAGS += -g -gsplit-dwarf -O0
else ifeq ($(DEBUG), 5)
CFLAGS += -DDEBUG -O0
else ifeq ($(DEBUG), 6)
CFLAGS += -DDEBUG -g -gsplit-dwarf -O0
else ifeq ($(DEBUG), 7)
CFLAGS += -DDEBUG -g -gsplit-dwarf -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fno-omit-frame-pointer
endif

# Rest
ifeq ($(VERBOSE),1)
	Q :=
	P =
else
	Q := @
	P = @printf "  %-8s %s\n" '$(1)' '$(subst $(ROOT),,$(abspath $(2)))';
	MAKEFLAGS += --no-print-directory -s
endif

TIME_CMD := $(shell which -a time 2> /dev/null | grep -E '^/' | head -n 1)
ifneq ($(TIME_CMD),)
TIME_CMD = /usr/bin/time -f ' [%es]   $(subst $(ROOT),,$(abspath $@)) \t~$(1)'
endif

# Default rules
%.o: %.c %.c.cmd.deps
	$(Q)$(call P,CC,$@) \
		$(call TIME_CMD,CC) \
		$(CC) -MD -MF $*.c.deps $< $(CFLAGS) -c -o $@ # -o $@ is needed because without it
		                            # targets not from CWD are created in CWD

%.o: %.cc %.cc.cmd.deps
	$(Q)$(call P,CXX,$@) \
		$(call TIME_CMD,CXX) \
		$(CXX) -MD -MF $*.cc.deps $< $(CXXFLAGS) -c -o $@ # -o $@ is needed because without it
		                            # targets not from CWD are created in CWD

%.o: %.cpp %.cpp.cmd.deps
	$(Q)$(call P,CXX,$@) \
		$(call TIME_CMD,CXX) \
		$(CXX) -MD -MF $*.cpp.deps $< $(CXXFLAGS) -c -o $@ # -o $@ is needed because without it
		                            # targets not from CWD are created in CWD

define load_dependencies
ifneq ($(filter clean, $(MAKECMDGOALS)), clean)
-include $(1:=.deps)
endif
endef

define include_makefile
$$(shell sed 's@$$$$(PREFIX)@$(dir $(1))@g' $(1) > .Makefile.include_makefile)
-include .Makefile.include_makefile
$$(shell rm .Makefile.include_makefile)
endef

SRCS_TO_OBJS = $(patsubst %.cpp, %.o, $(patsubst %.cc, %.o, $(patsubst %.c, %.o, $(1))))

.PHONY: build-info
build-info:
ifeq ($(MAKELEVEL), 0)
	@echo "DEBUG: $(DEBUG)"
	@echo "CC -> $(CC)"
	@echo "CXX -> $(CXX)"
endif

# If $(MAKECMDGOALS) contains other targets than the ones below or is empty then require build-info
ifneq ($(filter-out clean install uninstall run help, $(if $(MAKECMDGOALS),$(MAKECMDGOALS),all)),)
# This is quite ugly way to call build-info at first, but I suppose there is no other simpler way
-include /Makefile-Makefile.config
.PHONY: /Makefile-Makefile.config
/Makefile-Makefile.config: build-info
endif

# %.c.deps: %.c
# 	$(Q) echo -n "$@ " > $@
# 	$(Q)$(call P,DEP,$@)$(CC) -M $(CFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

# %.cc.deps: %.cc
# 	$(Q) echo -n "$@ " > $@
# 	$(Q)$(call P,DEP,$@)$(CXX) -M $(CXXFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

# %.cpp.deps: %.cpp
# 	$(Q) echo -n "$@ " > $@
# 	$(Q)$(call P,DEP,$@)$(CXX) -M $(CXXFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

MAKE_STATIC_LIB = $(Q)$(call P,AR,$@) \
	$(RM) $@ && \
	$(call TIME_CMD,AR) \
	$(AR) cr $@ $^

LINK = $(Q)$(call P,LINK,$@) \
	$(call TIME_CMD,LINK) \
	$(CXX) $^ $(LFLAGS) -o $@

GEN := $(Q)$(call P,GEN,$@)

# Build dependencies based on compilers and compilation flags
# Because f* make does not allow ';' in string in dependencies
SEMICOLON := ;
.SECONDEXPANSION:

.PRECIOUS: %.cmd.deps

# C files depend on C compiler and C flags
%.c.cmd.deps: VARS_DEPS_CONTENTS = "$(CC);$(CFLAGS)"
# C++ files depend on C++ compiler and C++ flags
%.cc.cmd.deps %.cpp.cmd.deps: VARS_DEPS_CONTENTS = "$(CXX);$(CXXFLAGS)"

%.cmd.deps: $$(if $$(findstring $$(VARS_DEPS_CONTENTS), "$$(shell cat '$$@' 2> /dev/null)"), , FORCE)
	$(Q)$(call P,CMD-DEP,$@) $(file > $@, $(VARS_DEPS_CONTENTS))

.PHONY: FORCE
FORCE:

.DEFAULT_GOAL :=

endif
